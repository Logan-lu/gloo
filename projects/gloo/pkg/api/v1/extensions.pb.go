// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/extensions.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Extensions struct {
	Configs              map[string]*types.Struct `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Extensions) Reset()         { *m = Extensions{} }
func (m *Extensions) String() string { return proto.CompactTextString(m) }
func (*Extensions) ProtoMessage()    {}
func (*Extensions) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb6aa7a8f802feeb, []int{0}
}
func (m *Extensions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Extensions.Unmarshal(m, b)
}
func (m *Extensions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Extensions.Marshal(b, m, deterministic)
}
func (m *Extensions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Extensions.Merge(m, src)
}
func (m *Extensions) XXX_Size() int {
	return xxx_messageInfo_Extensions.Size(m)
}
func (m *Extensions) XXX_DiscardUnknown() {
	xxx_messageInfo_Extensions.DiscardUnknown(m)
}

var xxx_messageInfo_Extensions proto.InternalMessageInfo

func (m *Extensions) GetConfigs() map[string]*types.Struct {
	if m != nil {
		return m.Configs
	}
	return nil
}

type Extension struct {
	Config               *types.Struct `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Extension) Reset()         { *m = Extension{} }
func (m *Extension) String() string { return proto.CompactTextString(m) }
func (*Extension) ProtoMessage()    {}
func (*Extension) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb6aa7a8f802feeb, []int{1}
}
func (m *Extension) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Extension.Unmarshal(m, b)
}
func (m *Extension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Extension.Marshal(b, m, deterministic)
}
func (m *Extension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Extension.Merge(m, src)
}
func (m *Extension) XXX_Size() int {
	return xxx_messageInfo_Extension.Size(m)
}
func (m *Extension) XXX_DiscardUnknown() {
	xxx_messageInfo_Extension.DiscardUnknown(m)
}

var xxx_messageInfo_Extension proto.InternalMessageInfo

func (m *Extension) GetConfig() *types.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*Extensions)(nil), "gloo.solo.io.Extensions")
	proto.RegisterMapType((map[string]*types.Struct)(nil), "gloo.solo.io.Extensions.ConfigsEntry")
	proto.RegisterType((*Extension)(nil), "gloo.solo.io.Extension")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/extensions.proto", fileDescriptor_eb6aa7a8f802feeb)
}

var fileDescriptor_eb6aa7a8f802feeb = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xd9, 0x16, 0x2b, 0xdd, 0xf6, 0x20, 0x8b, 0x60, 0x09, 0x22, 0xa1, 0x20, 0xe4, 0xd2,
	0x19, 0xad, 0x17, 0x15, 0x45, 0xa8, 0xf4, 0x05, 0xd2, 0x9b, 0xb7, 0x26, 0x6c, 0xd7, 0xb5, 0x31,
	0x13, 0xb2, 0x9b, 0x92, 0xbe, 0x8e, 0x27, 0x9f, 0xcb, 0xa7, 0xf0, 0x28, 0xd9, 0x4d, 0x6b, 0x4f,
	0xe2, 0x6d, 0x76, 0xff, 0x6f, 0xfe, 0x9f, 0x9f, 0xe1, 0x8f, 0x4a, 0xdb, 0xd7, 0x2a, 0x81, 0x94,
	0xde, 0xd1, 0x50, 0x46, 0x13, 0x4d, 0xa8, 0x32, 0x22, 0x2c, 0x4a, 0x7a, 0x93, 0xa9, 0x35, 0xfe,
	0xb5, 0x2c, 0x34, 0x6e, 0xae, 0x51, 0xd6, 0x56, 0xe6, 0x46, 0x53, 0x6e, 0xa0, 0x28, 0xc9, 0x92,
	0x18, 0x36, 0x2a, 0x34, 0x8b, 0xa0, 0x29, 0x38, 0x57, 0x44, 0x2a, 0x93, 0xe8, 0xb4, 0xa4, 0x5a,
	0xa1, 0xb1, 0x65, 0x95, 0x5a, 0xcf, 0x06, 0xa7, 0x8a, 0x14, 0xb9, 0x11, 0x9b, 0xa9, 0xfd, 0x15,
	0xb2, 0xb6, 0xfe, 0x53, 0xd6, 0x2d, 0x39, 0xfe, 0x60, 0x9c, 0xcf, 0xf7, 0x51, 0xe2, 0x89, 0x1f,
	0xa7, 0x94, 0xaf, 0xb4, 0x32, 0x23, 0x16, 0x76, 0xa3, 0xc1, 0xf4, 0x12, 0x0e, 0x63, 0xe1, 0x17,
	0x85, 0x67, 0xcf, 0xcd, 0x73, 0x5b, 0x6e, 0xe3, 0xdd, 0x56, 0xb0, 0xe0, 0xc3, 0x43, 0x41, 0x9c,
	0xf0, 0xee, 0x5a, 0x6e, 0x47, 0x2c, 0x64, 0x51, 0x3f, 0x6e, 0x46, 0x31, 0xe1, 0x47, 0x9b, 0x65,
	0x56, 0xc9, 0x51, 0x27, 0x64, 0xd1, 0x60, 0x7a, 0x06, 0xbe, 0x09, 0xec, 0x9a, 0xc0, 0xc2, 0x35,
	0x89, 0x3d, 0x75, 0xdf, 0xb9, 0x65, 0xe3, 0x07, 0xde, 0xdf, 0x07, 0x0b, 0xe4, 0x3d, 0x1f, 0xe6,
	0x4c, 0xff, 0x30, 0x68, 0xb1, 0xd9, 0xdd, 0xf7, 0x8c, 0x7d, 0x7e, 0x5d, 0xb0, 0x97, 0xab, 0xff,
	0x1d, 0xa0, 0x58, 0xab, 0xf6, 0x08, 0x49, 0xcf, 0x79, 0xde, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x14, 0x70, 0xfe, 0x8b, 0xbb, 0x01, 0x00, 0x00,
}

func (this *Extensions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Extensions)
	if !ok {
		that2, ok := that.(Extensions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Configs) != len(that1.Configs) {
		return false
	}
	for i := range this.Configs {
		if !this.Configs[i].Equal(that1.Configs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Extension) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Extension)
	if !ok {
		that2, ok := that.(Extension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
